// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: 2LqbY1eBUixE

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import UserteamNavbar from "../../UserteamNavbar"; // plasmic-import: P-uBnHr89-in/component
import AvatarPlayer from "../../AvatarPlayer"; // plasmic-import: 4QnaRcOLXj0D/component
import SoccerPlaceMens2 from "../../SoccerPlaceMens2"; // plasmic-import: xodLqMOhDs29/component
import PlayerPickerRow from "../../PlayerPickerRow"; // plasmic-import: NaQtMjgilBY9/component
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicEditTeam.module.css"; // plasmic-import: 2LqbY1eBUixE/css

createPlasmicElementProxy;

export type PlasmicEditTeam__VariantMembers = {};
export type PlasmicEditTeam__VariantsArgs = {};
type VariantPropType = keyof PlasmicEditTeam__VariantsArgs;
export const PlasmicEditTeam__VariantProps = new Array<VariantPropType>();

export type PlasmicEditTeam__ArgsType = {};
type ArgPropType = keyof PlasmicEditTeam__ArgsType;
export const PlasmicEditTeam__ArgProps = new Array<ArgPropType>();

export type PlasmicEditTeam__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  userteamNavbar?: Flex__<typeof UserteamNavbar>;
  columns?: Flex__<"div">;
  stadion?: Flex__<"div">;
  teamInfo?: Flex__<"div">;
  goa?: Flex__<"div">;
  avatarPlayer?: Flex__<typeof AvatarPlayer>;
  def?: Flex__<"div">;
  avatarPlayer2?: Flex__<typeof AvatarPlayer>;
  mid?: Flex__<"div">;
  avatarPlayer3?: Flex__<typeof AvatarPlayer>;
  str?: Flex__<"div">;
  avatarPlayer4?: Flex__<typeof AvatarPlayer>;
  soccerPlaceMens2?: Flex__<typeof SoccerPlaceMens2>;
  column?: Flex__<"div">;
  filter?: Flex__<"div">;
  playerList?: Flex__<"div">;
  playerPickerRow?: Flex__<typeof PlayerPickerRow>;
};

export interface DefaultEditTeamProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicEditTeam__RenderFunc(props: {
  variants: PlasmicEditTeam__VariantsArgs;
  args: PlasmicEditTeam__ArgsType;
  overrides: PlasmicEditTeam__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});

  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "f978efab-7db3-41c0-82cd-ea83803fac9b",
        userArgs: {
          params: [$ctx.params.id, $ctx.params.comp_id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return "getOne";
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.f978efab-7db3-41c0-82cd-ea83803fac9b.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    teamPlayer: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "0b5a8e59-d38e-4067-b531-a1d2b0239b0d",
        userArgs: {
          params: [$queries.query.data.response[0].id]
        },
        cacheKey: `plasmic.$.0b5a8e59-d38e-4067-b531-a1d2b0239b0d.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    playerList: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "3a9f74e8-7624-42d9-8d1c-464b195bf62a",
        userArgs: {
          params: [$queries.query.data.response[0].competition_id]
        },
        cacheKey: `plasmic.$.3a9f74e8-7624-42d9-8d1c-464b195bf62a.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <div className={classNames(projectcss.all, sty.freeBox__zJXxL)}>
            <UserteamNavbar
              data-plasmic-name={"userteamNavbar"}
              data-plasmic-override={overrides.userteamNavbar}
              className={classNames("__wab_instance", sty.userteamNavbar)}
              nameOfTeam={` ${$queries.query.data.response[0].name}`}
              teamBalance={(() => {
                try {
                  return $queries.query.data.response[0].balance;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return 0;
                  }
                  throw e;
                }
              })()}
            />

            <div
              data-plasmic-name={"columns"}
              data-plasmic-override={overrides.columns}
              className={classNames(projectcss.all, sty.columns)}
            >
              <div
                data-plasmic-name={"stadion"}
                data-plasmic-override={overrides.stadion}
                className={classNames(projectcss.all, sty.stadion)}
              >
                <div
                  className={classNames(projectcss.all, sty.freeBox___3JtsZ)}
                >
                  <Stack__
                    as={"div"}
                    data-plasmic-name={"teamInfo"}
                    data-plasmic-override={overrides.teamInfo}
                    hasGap={true}
                    className={classNames(projectcss.all, sty.teamInfo)}
                  >
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text__l9Km6
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "(" +
                              $queries.teamPlayer.data.response.filter(
                                x => x.player_id != null
                              ).length +
                              "/11)"
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                    <div
                      className={classNames(
                        projectcss.all,
                        projectcss.__wab_text,
                        sty.text___0Xzpm
                      )}
                    >
                      <React.Fragment>
                        {(() => {
                          try {
                            return (
                              "$" + $queries.query.data.response[0].balance
                            );
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}
                      </React.Fragment>
                    </div>
                  </Stack__>
                  <div
                    data-plasmic-name={"goa"}
                    data-plasmic-override={overrides.goa}
                    className={classNames(projectcss.all, sty.goa)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.teamPlayer.data.response.filter(
                            x => x.position === "GOA"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__aPb5
                          )}
                          key={currentIndex}
                        >
                          <AvatarPlayer
                            data-plasmic-name={"avatarPlayer"}
                            data-plasmic-override={overrides.avatarPlayer}
                            className={classNames(
                              "__wab_instance",
                              sty.avatarPlayer
                            )}
                            image={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            name={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      );
                    })}
                  </div>
                  <div
                    data-plasmic-name={"def"}
                    data-plasmic-override={overrides.def}
                    className={classNames(projectcss.all, sty.def)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.teamPlayer.data.response.filter(
                            x => x.position === "DEF"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox___4QjEq
                          )}
                          key={currentIndex}
                        >
                          <AvatarPlayer
                            data-plasmic-name={"avatarPlayer2"}
                            data-plasmic-override={overrides.avatarPlayer2}
                            className={classNames(
                              "__wab_instance",
                              sty.avatarPlayer2
                            )}
                            image={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            name={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      );
                    })}
                  </div>
                  <div
                    data-plasmic-name={"mid"}
                    data-plasmic-override={overrides.mid}
                    className={classNames(projectcss.all, sty.mid)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.teamPlayer.data.response.filter(
                            x => x.position === "MID"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__hYu4
                          )}
                          key={currentIndex}
                        >
                          <AvatarPlayer
                            data-plasmic-name={"avatarPlayer3"}
                            data-plasmic-override={overrides.avatarPlayer3}
                            className={classNames(
                              "__wab_instance",
                              sty.avatarPlayer3
                            )}
                            image={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            name={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return ``;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      );
                    })}
                  </div>
                  <div
                    data-plasmic-name={"str"}
                    data-plasmic-override={overrides.str}
                    className={classNames(projectcss.all, sty.str)}
                  >
                    {(_par =>
                      !_par ? [] : Array.isArray(_par) ? _par : [_par])(
                      (() => {
                        try {
                          return $queries.teamPlayer.data.response.filter(
                            x => x.position === "STR"
                          );
                        } catch (e) {
                          if (
                            e instanceof TypeError ||
                            e?.plasmicType === "PlasmicUndefinedDataError"
                          ) {
                            return [];
                          }
                          throw e;
                        }
                      })()
                    ).map((__plasmic_item_0, __plasmic_idx_0) => {
                      const currentItem = __plasmic_item_0;
                      const currentIndex = __plasmic_idx_0;
                      return (
                        <div
                          className={classNames(
                            projectcss.all,
                            sty.freeBox__we8EE
                          )}
                          key={currentIndex}
                        >
                          <AvatarPlayer
                            data-plasmic-name={"avatarPlayer4"}
                            data-plasmic-override={overrides.avatarPlayer4}
                            capitanVisibility={false}
                            className={classNames(
                              "__wab_instance",
                              sty.avatarPlayer4
                            )}
                            image={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).image;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}
                            name={(() => {
                              try {
                                return $queries.playerList.data.response.find(
                                  x => x.id === currentItem.player_id
                                ).name;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return ``;
                                }
                                throw e;
                              }
                            })()}
                          />
                        </div>
                      );
                    })}
                  </div>
                </div>
                <SoccerPlaceMens2
                  data-plasmic-name={"soccerPlaceMens2"}
                  data-plasmic-override={overrides.soccerPlaceMens2}
                  className={classNames("__wab_instance", sty.soccerPlaceMens2)}
                />
              </div>
              <div
                data-plasmic-name={"column"}
                data-plasmic-override={overrides.column}
                className={classNames(projectcss.all, sty.column)}
              >
                <div
                  data-plasmic-name={"filter"}
                  data-plasmic-override={overrides.filter}
                  className={classNames(projectcss.all, sty.filter)}
                />

                <div
                  data-plasmic-name={"playerList"}
                  data-plasmic-override={overrides.playerList}
                  className={classNames(projectcss.all, sty.playerList)}
                >
                  {(_par => (!_par ? [] : Array.isArray(_par) ? _par : [_par]))(
                    (() => {
                      try {
                        return $queries.playerList.data.response;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return [];
                        }
                        throw e;
                      }
                    })()
                  ).map((__plasmic_item_0, __plasmic_idx_0) => {
                    const currentItem = __plasmic_item_0;
                    const currentIndex = __plasmic_idx_0;
                    return (
                      <PlayerPickerRow
                        data-plasmic-name={"playerPickerRow"}
                        data-plasmic-override={overrides.playerPickerRow}
                        className={classNames(
                          "__wab_instance",
                          sty.playerPickerRow
                        )}
                        fsyp={(() => {
                          try {
                            return currentItem.ochko;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        key={currentIndex}
                        name={(() => {
                          try {
                            return currentItem.name;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        onclickPlus={async event => {
                          const $steps = {};

                          $steps["updateMoney"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                    opId: "4a8e5f61-e13f-4caa-95dd-62a9c3e416d7",
                                    userArgs: {
                                      params: [
                                        $queries.query.data.response[0].id
                                      ],
                                      body: [
                                        $queries.query.data.response[0]
                                          .balance - currentItem.price
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updateMoney"] != null &&
                            typeof $steps["updateMoney"] === "object" &&
                            typeof $steps["updateMoney"].then === "function"
                          ) {
                            $steps["updateMoney"] = await $steps["updateMoney"];
                          }

                          $steps["updatePlayer"] = true
                            ? (() => {
                                const actionArgs = {
                                  dataOp: {
                                    sourceId: "vQtRPuFArSfh43vUmgx2PS",
                                    opId: "ecb73c25-5e21-48e6-8b7d-cc47635d3ab8",
                                    userArgs: {
                                      body: [
                                        currentItem.id,
                                        currentItem.position,
                                        $queries.query.data.response[0].id
                                      ]
                                    },
                                    cacheKey: null,
                                    invalidatedKeys: ["plasmic_refresh_all"],
                                    roleId: null
                                  }
                                };
                                return (async ({ dataOp, continueOnError }) => {
                                  try {
                                    const response = await executePlasmicDataOp(
                                      dataOp,
                                      {
                                        userAuthToken:
                                          dataSourcesCtx?.userAuthToken,
                                        user: dataSourcesCtx?.user
                                      }
                                    );
                                    await plasmicInvalidate(
                                      dataOp.invalidatedKeys
                                    );
                                    return response;
                                  } catch (e) {
                                    if (!continueOnError) {
                                      throw e;
                                    }
                                    return e;
                                  }
                                })?.apply(null, [actionArgs]);
                              })()
                            : undefined;
                          if (
                            $steps["updatePlayer"] != null &&
                            typeof $steps["updatePlayer"] === "object" &&
                            typeof $steps["updatePlayer"].then === "function"
                          ) {
                            $steps["updatePlayer"] = await $steps[
                              "updatePlayer"
                            ];
                          }
                        }}
                        position={(() => {
                          try {
                            return currentItem.position;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                        price={(() => {
                          try {
                            return currentItem.price;
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return undefined;
                            }
                            throw e;
                          }
                        })()}
                      />
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "navbar",
    "userteamNavbar",
    "columns",
    "stadion",
    "teamInfo",
    "goa",
    "avatarPlayer",
    "def",
    "avatarPlayer2",
    "mid",
    "avatarPlayer3",
    "str",
    "avatarPlayer4",
    "soccerPlaceMens2",
    "column",
    "filter",
    "playerList",
    "playerPickerRow"
  ],
  navbar: ["navbar"],
  userteamNavbar: ["userteamNavbar"],
  columns: [
    "columns",
    "stadion",
    "teamInfo",
    "goa",
    "avatarPlayer",
    "def",
    "avatarPlayer2",
    "mid",
    "avatarPlayer3",
    "str",
    "avatarPlayer4",
    "soccerPlaceMens2",
    "column",
    "filter",
    "playerList",
    "playerPickerRow"
  ],
  stadion: [
    "stadion",
    "teamInfo",
    "goa",
    "avatarPlayer",
    "def",
    "avatarPlayer2",
    "mid",
    "avatarPlayer3",
    "str",
    "avatarPlayer4",
    "soccerPlaceMens2"
  ],
  teamInfo: ["teamInfo"],
  goa: ["goa", "avatarPlayer"],
  avatarPlayer: ["avatarPlayer"],
  def: ["def", "avatarPlayer2"],
  avatarPlayer2: ["avatarPlayer2"],
  mid: ["mid", "avatarPlayer3"],
  avatarPlayer3: ["avatarPlayer3"],
  str: ["str", "avatarPlayer4"],
  avatarPlayer4: ["avatarPlayer4"],
  soccerPlaceMens2: ["soccerPlaceMens2"],
  column: ["column", "filter", "playerList", "playerPickerRow"],
  filter: ["filter"],
  playerList: ["playerList", "playerPickerRow"],
  playerPickerRow: ["playerPickerRow"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  userteamNavbar: typeof UserteamNavbar;
  columns: "div";
  stadion: "div";
  teamInfo: "div";
  goa: "div";
  avatarPlayer: typeof AvatarPlayer;
  def: "div";
  avatarPlayer2: typeof AvatarPlayer;
  mid: "div";
  avatarPlayer3: typeof AvatarPlayer;
  str: "div";
  avatarPlayer4: typeof AvatarPlayer;
  soccerPlaceMens2: typeof SoccerPlaceMens2;
  column: "div";
  filter: "div";
  playerList: "div";
  playerPickerRow: typeof PlayerPickerRow;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicEditTeam__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicEditTeam__VariantsArgs;
    args?: PlasmicEditTeam__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicEditTeam__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicEditTeam__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicEditTeam__ArgProps,
          internalVariantPropNames: PlasmicEditTeam__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicEditTeam__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicEditTeam";
  } else {
    func.displayName = `PlasmicEditTeam.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicEditTeam = Object.assign(
  // Top-level PlasmicEditTeam renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    userteamNavbar: makeNodeComponent("userteamNavbar"),
    columns: makeNodeComponent("columns"),
    stadion: makeNodeComponent("stadion"),
    teamInfo: makeNodeComponent("teamInfo"),
    goa: makeNodeComponent("goa"),
    avatarPlayer: makeNodeComponent("avatarPlayer"),
    def: makeNodeComponent("def"),
    avatarPlayer2: makeNodeComponent("avatarPlayer2"),
    mid: makeNodeComponent("mid"),
    avatarPlayer3: makeNodeComponent("avatarPlayer3"),
    str: makeNodeComponent("str"),
    avatarPlayer4: makeNodeComponent("avatarPlayer4"),
    soccerPlaceMens2: makeNodeComponent("soccerPlaceMens2"),
    column: makeNodeComponent("column"),
    filter: makeNodeComponent("filter"),
    playerList: makeNodeComponent("playerList"),
    playerPickerRow: makeNodeComponent("playerPickerRow"),

    // Metadata about props expected for PlasmicEditTeam
    internalVariantProps: PlasmicEditTeam__VariantProps,
    internalArgProps: PlasmicEditTeam__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicEditTeam;
/* prettier-ignore-end */
