// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tDWy3GXn2mzd9e2xUaPdmu
// Component: IAM42mYRBrPY

import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";
import { useRouter } from "next/router";

import {
  Flex as Flex__,
  MultiChoiceArg,
  PlasmicDataSourceContextProvider as PlasmicDataSourceContextProvider__,
  PlasmicIcon as PlasmicIcon__,
  PlasmicImg as PlasmicImg__,
  PlasmicLink as PlasmicLink__,
  PlasmicPageGuard as PlasmicPageGuard__,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  Stack as Stack__,
  StrictProps,
  Trans as Trans__,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  generateOnMutateForSpec,
  generateStateOnChangeProp,
  generateStateOnChangePropForCodeComponents,
  generateStateValueProp,
  get as $stateGet,
  hasVariant,
  initializeCodeComponentStates,
  initializePlasmicStates,
  makeFragment,
  omit,
  pick,
  renderPlasmicSlot,
  set as $stateSet,
  useCurrentUser,
  useDollarState,
  usePlasmicTranslator,
  useTrigger,
  wrapWithClassName
} from "@plasmicapp/react-web";
import {
  DataCtxReader as DataCtxReader__,
  useDataEnv,
  useGlobalActions
} from "@plasmicapp/react-web/lib/host";

import { usePlasmicDataSourceContext } from "@plasmicapp/data-sources-context";
import {
  executePlasmicDataOp,
  usePlasmicDataOp,
  usePlasmicInvalidate
} from "@plasmicapp/react-web/lib/data-sources";

import Navbar from "../../Navbar"; // plasmic-import: TKT8XnZtrLZi/component
import { AntdModal } from "@plasmicpkgs/antd5/skinny/registerModal";
import { FormWrapper } from "@plasmicpkgs/antd5/skinny/SchemaForm";
import { formHelpers as FormWrapper_Helpers } from "@plasmicpkgs/antd5/skinny/Form";
import { AntdButton } from "@plasmicpkgs/antd5/skinny/registerButton";
import { Fetcher } from "@plasmicapp/react-web/lib/data-sources";

import "@plasmicapp/react-web/lib/plasmic.css";

import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import plasmic_plasmic_rich_components_css from "../plasmic_rich_components/plasmic.module.css"; // plasmic-import: jkU633o1Cz7HrJdwdxhVHk/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: tDWy3GXn2mzd9e2xUaPdmu/projectcss
import sty from "./PlasmicTeam.module.css"; // plasmic-import: IAM42mYRBrPY/css

createPlasmicElementProxy;

export type PlasmicTeam__VariantMembers = {};
export type PlasmicTeam__VariantsArgs = {};
type VariantPropType = keyof PlasmicTeam__VariantsArgs;
export const PlasmicTeam__VariantProps = new Array<VariantPropType>();

export type PlasmicTeam__ArgsType = {};
type ArgPropType = keyof PlasmicTeam__ArgsType;
export const PlasmicTeam__ArgProps = new Array<ArgPropType>();

export type PlasmicTeam__OverridesType = {
  root?: Flex__<"div">;
  navbar?: Flex__<typeof Navbar>;
  img?: Flex__<typeof PlasmicImg__>;
  modal2?: Flex__<typeof AntdModal>;
  form2?: Flex__<typeof FormWrapper>;
};

export interface DefaultTeamProps {}

const $$ = {};

function useNextRouter() {
  try {
    return useRouter();
  } catch {}
  return undefined;
}

function PlasmicTeam__RenderFunc(props: {
  variants: PlasmicTeam__VariantsArgs;
  args: PlasmicTeam__ArgsType;
  overrides: PlasmicTeam__OverridesType;
  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const args = React.useMemo(() => Object.assign({}, props.args), [props.args]);

  const $props = {
    ...args,
    ...variants
  };

  const __nextRouter = useNextRouter();
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;

  const currentUser = useCurrentUser?.() || {};

  let [$queries, setDollarQueries] = React.useState<
    Record<string, ReturnType<typeof usePlasmicDataOp>>
  >({});
  const stateSpecs: Parameters<typeof useDollarState>[0] = React.useMemo(
    () => [
      {
        path: "modal2.open",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false
      },
      {
        path: "form2.value",
        type: "private",
        variableType: "object",
        initFunc: ({ $props, $state, $queries, $ctx }) => undefined,

        refName: "form2",
        onMutate: generateOnMutateForSpec("value", FormWrapper_Helpers)
      },
      {
        path: "form2.isSubmitting",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => false,

        refName: "form2",
        onMutate: generateOnMutateForSpec("isSubmitting", FormWrapper_Helpers)
      }
    ],
    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const dataSourcesCtx = usePlasmicDataSourceContext();
  const plasmicInvalidate = usePlasmicInvalidate();

  const new$Queries: Record<string, ReturnType<typeof usePlasmicDataOp>> = {
    query: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "30e393a7-21a7-46a5-b4bf-07dc3eae3afd",
        userArgs: {
          filters: [$ctx.params.id]
        },
        cacheKey: `plasmic.$.${(() => {
          try {
            return undefined;
          } catch (e) {
            if (
              e instanceof TypeError ||
              e?.plasmicType === "PlasmicUndefinedDataError"
            ) {
              return "";
            }
            throw e;
          }
        })()}.$.30e393a7-21a7-46a5-b4bf-07dc3eae3afd.$.`,
        invalidatedKeys: null,
        roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
      };
    }),
    team: usePlasmicDataOp(() => {
      return {
        sourceId: "8cdHi4ivRUEkK6qbegQevF",
        opId: "c33b79b5-0719-4400-861a-3f565b5e7083",
        userArgs: {
          query: [$queries.query.data[0].id]
        },
        cacheKey: `plasmic.$.c33b79b5-0719-4400-861a-3f565b5e7083.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    }),
    checkExistsHttp: usePlasmicDataOp(() => {
      return {
        sourceId: "vQtRPuFArSfh43vUmgx2PS",
        opId: "a7af71c9-6f9f-46b2-a2c2-b3588a3e48a7",
        userArgs: {
          params: [$queries.query.data[0].id]
        },
        cacheKey: `plasmic.$.a7af71c9-6f9f-46b2-a2c2-b3588a3e48a7.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);

    $queries = new$Queries;
  }

  return (
    <React.Fragment>
      <Head></Head>

      <style>{`
        body {
          margin: 0;
        }
      `}</style>

      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            plasmic_plasmic_rich_components_css.plasmic_tokens,
            sty.root
          )}
        >
          <Navbar
            data-plasmic-name={"navbar"}
            data-plasmic-override={overrides.navbar}
            className={classNames("__wab_instance", sty.navbar)}
          />

          <Stack__
            as={"div"}
            hasGap={true}
            className={classNames(projectcss.all, sty.freeBox__z02Hv)}
          >
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__j1TWl)}
            >
              <PlasmicImg__
                data-plasmic-name={"img"}
                data-plasmic-override={overrides.img}
                alt={""}
                className={classNames(sty.img)}
                displayHeight={"auto"}
                displayMaxHeight={"none"}
                displayMaxWidth={"100%"}
                displayMinHeight={"0"}
                displayMinWidth={"0"}
                displayWidth={"auto"}
                loading={"lazy"}
                src={(() => {
                  try {
                    return $queries.query.data[0].flag;
                  } catch (e) {
                    if (
                      e instanceof TypeError ||
                      e?.plasmicType === "PlasmicUndefinedDataError"
                    ) {
                      return undefined;
                    }
                    throw e;
                  }
                })()}
                width={"370px"}
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__oWbRm
                )}
              >
                <React.Fragment>
                  {(() => {
                    try {
                      return $queries.query.data[0].title;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return "";
                      }
                      throw e;
                    }
                  })()}
                </React.Fragment>
              </div>
            </Stack__>
            <Stack__
              as={"div"}
              hasGap={true}
              className={classNames(projectcss.all, sty.freeBox__o8Cdv)}
            >
              {(() => {
                try {
                  return !$queries.checkExistsHttp.data.response;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <AntdModal
                  data-plasmic-name={"modal2"}
                  data-plasmic-override={overrides.modal2}
                  className={classNames("__wab_instance", sty.modal2)}
                  defaultStylesClassName={classNames(
                    projectcss.root_reset,
                    projectcss.plasmic_default_styles,
                    projectcss.plasmic_mixins,
                    projectcss.plasmic_tokens,
                    plasmic_antd_5_hostless_css.plasmic_tokens,
                    plasmic_plasmic_rich_components_css.plasmic_tokens
                  )}
                  hideFooter={true}
                  modalContentClassName={classNames({
                    [sty["pcls_1nYCZIkSzTo6"]]: true
                  })}
                  modalScopeClassName={sty["modal2__modal"]}
                  onOpenChange={generateStateOnChangeProp($state, [
                    "modal2",
                    "open"
                  ])}
                  open={generateStateValueProp($state, ["modal2", "open"])}
                  title={"Insert name of team"}
                  trigger={
                    <AntdButton
                      className={classNames(
                        "__wab_instance",
                        sty.button__cjVt1
                      )}
                      danger={false}
                      ghost={false}
                      loading={false}
                      shape={"default"}
                      size={"large"}
                      submitsForm={false}
                      type={"default"}
                    >
                      <div
                        className={classNames(
                          projectcss.all,
                          projectcss.__wab_text,
                          sty.text__bd78M
                        )}
                      >
                        {"Create team"}
                      </div>
                    </AntdButton>
                  }
                >
                  {(() => {
                    const child$Props = {
                      className: classNames("__wab_instance", sty.form2),
                      data: {
                        sourceId: "8cdHi4ivRUEkK6qbegQevF",
                        opId: "64d46713-84cc-46a6-a33a-e049f8959f3d",
                        userArgs: {},
                        cacheKey: `plasmic.$.${(() => {
                          try {
                            return "getSchema";
                          } catch (e) {
                            if (
                              e instanceof TypeError ||
                              e?.plasmicType === "PlasmicUndefinedDataError"
                            ) {
                              return "";
                            }
                            throw e;
                          }
                        })()}.$.svIxhG5uRyTp.$.64d46713-84cc-46a6-a33a-e049f8959f3d.$.`,
                        invalidatedKeys: null,
                        roleId: null
                      },
                      dataFormItems: (() => {
                        const __composite = [
                          {
                            key: "id",
                            inputType: "Number",
                            fieldId: "id",
                            label: "id",
                            name: "id",
                            hidden: null
                          },
                          {
                            key: "compotetion_id",
                            inputType: "Number",
                            fieldId: "compotetion_id",
                            label: "compotetion_id",
                            name: "compotetion_id",
                            hidden: null
                          },
                          {
                            key: "formation_id",
                            inputType: "Number",
                            fieldId: "formation_id",
                            label: "formation_id",
                            name: "formation_id",
                            hidden: null
                          },
                          {
                            key: "balance",
                            inputType: "Number",
                            fieldId: "balance",
                            label: "balance",
                            name: "balance",
                            hidden: null
                          },
                          {
                            key: "id",
                            inputType: "Number",
                            fieldId: "id",
                            label: "id",
                            name: "id",
                            hidden: null
                          },
                          {
                            key: "club_id",
                            inputType: "Number",
                            fieldId: "club_id",
                            label: "club_id",
                            name: "club_id",
                            hidden: null
                          },
                          {
                            key: "user_id",
                            inputType: "Number",
                            fieldId: "user_id",
                            label: "user_id",
                            name: "user_id",
                            hidden: null
                          },
                          {
                            key: "name",
                            inputType: "Text",
                            fieldId: "name",
                            label: "name",
                            name: "name"
                          },
                          {
                            key: "created_at",
                            inputType: "Text",
                            fieldId: "created_at",
                            label: "created_at",
                            name: "created_at",
                            hidden: null
                          },
                          {
                            key: "captain_id",
                            inputType: "Number",
                            fieldId: "captain_id",
                            label: "captain_id",
                            name: "captain_id",
                            hidden: null
                          }
                        ];
                        __composite["0"]["hidden"] = true;
                        __composite["1"]["hidden"] = true;
                        __composite["2"]["hidden"] = true;
                        __composite["3"]["hidden"] = true;
                        __composite["4"]["hidden"] = true;
                        __composite["5"]["hidden"] = true;
                        __composite["6"]["hidden"] = true;
                        __composite["8"]["hidden"] = true;
                        __composite["9"]["hidden"] = true;
                        return __composite;
                      })(),

                      extendedOnValuesChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "value",
                          ["form2", "value"],
                          FormWrapper_Helpers
                        ),
                      formItems: [],
                      labelCol: { span: 8, horizontalOnly: true },
                      layout: "vertical",
                      mode: "simplified",
                      onFinish: async values => {
                        const $steps = {};

                        $steps["defaultSubmit"] = true
                          ? (() => {
                              const actionArgs = {
                                dataOp: {
                                  sourceId: "8cdHi4ivRUEkK6qbegQevF",
                                  opId: "71a126d4-4c6a-4b15-bd21-9fb80beac796",
                                  userArgs: {
                                    variables: [
                                      $queries.query.data[0].id,
                                      $state.form2.value.name
                                    ]
                                  },
                                  cacheKey: null,
                                  invalidatedKeys: ["plasmic_refresh_all"],
                                  roleId: "f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"
                                }
                              };
                              return (async ({ dataOp, continueOnError }) => {
                                try {
                                  const response = await executePlasmicDataOp(
                                    dataOp,
                                    {
                                      userAuthToken:
                                        dataSourcesCtx?.userAuthToken,
                                      user: dataSourcesCtx?.user
                                    }
                                  );
                                  await plasmicInvalidate(
                                    dataOp.invalidatedKeys
                                  );
                                  return response;
                                } catch (e) {
                                  if (!continueOnError) {
                                    throw e;
                                  }
                                  return e;
                                }
                              })?.apply(null, [actionArgs]);
                            })()
                          : undefined;
                        if (
                          $steps["defaultSubmit"] != null &&
                          typeof $steps["defaultSubmit"] === "object" &&
                          typeof $steps["defaultSubmit"].then === "function"
                        ) {
                          $steps["defaultSubmit"] = await $steps[
                            "defaultSubmit"
                          ];
                        }
                      },
                      onIsSubmittingChange:
                        generateStateOnChangePropForCodeComponents(
                          $state,
                          "isSubmitting",
                          ["form2", "isSubmitting"],
                          FormWrapper_Helpers
                        ),
                      ref: ref => {
                        $refs["form2"] = ref;
                      },
                      submitSlot: (
                        <AntdButton
                          className={classNames(
                            "__wab_instance",
                            sty.button___0S4Zk
                          )}
                          submitsForm={true}
                          type={"primary"}
                        >
                          <div
                            className={classNames(
                              projectcss.all,
                              projectcss.__wab_text,
                              sty.text__uqpq
                            )}
                          >
                            {"Create"}
                          </div>
                        </AntdButton>
                      ),
                      wrapperCol: { span: 16, horizontalOnly: true }
                    };
                    initializeCodeComponentStates(
                      $state,
                      [
                        {
                          name: "value",
                          plasmicStateName: "form2.value"
                        },
                        {
                          name: "isSubmitting",
                          plasmicStateName: "form2.isSubmitting"
                        }
                      ],
                      [],
                      FormWrapper_Helpers ?? {},
                      child$Props
                    );

                    return (
                      <FormWrapper
                        data-plasmic-name={"form2"}
                        data-plasmic-override={overrides.form2}
                        {...child$Props}
                      />
                    );
                  })()}
                </AntdModal>
              ) : null}
              {(() => {
                try {
                  return $queries.checkExistsHttp.data.response;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link__zaCav
                  )}
                  component={Link}
                  href={"https://www.plasmic.app/"}
                  platform={"nextjs"}
                >
                  {"Show team"}
                </PlasmicLink__>
              ) : null}
              {(() => {
                try {
                  return $queries.checkExistsHttp.data.response;
                } catch (e) {
                  if (
                    e instanceof TypeError ||
                    e?.plasmicType === "PlasmicUndefinedDataError"
                  ) {
                    return true;
                  }
                  throw e;
                }
              })() ? (
                <PlasmicLink__
                  className={classNames(
                    projectcss.all,
                    projectcss.a,
                    projectcss.__wab_text,
                    sty.link___5Ag7H
                  )}
                  component={Link}
                  href={`/team-2/${(() => {
                    try {
                      return $queries.team.data[0].id;
                    } catch (e) {
                      if (
                        e instanceof TypeError ||
                        e?.plasmicType === "PlasmicUndefinedDataError"
                      ) {
                        return undefined;
                      }
                      throw e;
                    }
                  })()}`}
                  onClick={async event => {
                    const $steps = {};

                    $steps["goToEditTeam"] = true
                      ? (() => {
                          const actionArgs = {
                            destination: `/team-2/${(() => {
                              try {
                                return $queries.team.data[0].id;
                              } catch (e) {
                                if (
                                  e instanceof TypeError ||
                                  e?.plasmicType === "PlasmicUndefinedDataError"
                                ) {
                                  return undefined;
                                }
                                throw e;
                              }
                            })()}`
                          };
                          return (({ destination }) => {
                            if (
                              typeof destination === "string" &&
                              destination.startsWith("#")
                            ) {
                              document
                                .getElementById(destination.substr(1))
                                .scrollIntoView({ behavior: "smooth" });
                            } else {
                              __nextRouter?.push(destination);
                            }
                          })?.apply(null, [actionArgs]);
                        })()
                      : undefined;
                    if (
                      $steps["goToEditTeam"] != null &&
                      typeof $steps["goToEditTeam"] === "object" &&
                      typeof $steps["goToEditTeam"].then === "function"
                    ) {
                      $steps["goToEditTeam"] = await $steps["goToEditTeam"];
                    }
                  }}
                  platform={"nextjs"}
                >
                  {"Edit Team"}
                </PlasmicLink__>
              ) : null}
            </Stack__>
          </Stack__>
        </div>
      </div>
    </React.Fragment>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "navbar", "img", "modal2", "form2"],
  navbar: ["navbar"],
  img: ["img"],
  modal2: ["modal2", "form2"],
  form2: ["form2"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  (typeof PlasmicDescendants)[T][number];
type NodeDefaultElementType = {
  root: "div";
  navbar: typeof Navbar;
  img: typeof PlasmicImg__;
  modal2: typeof AntdModal;
  form2: typeof FormWrapper;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicTeam__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicTeam__VariantsArgs;
    args?: PlasmicTeam__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicTeam__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    /* Specify args directly as props*/ Omit<
      PlasmicTeam__ArgsType,
      ReservedPropsType
    > &
    /* Specify overrides for each element directly as props*/ Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    /* Specify props for the root element*/ Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicTeam__ArgProps,
          internalVariantPropNames: PlasmicTeam__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicTeam__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicTeam";
  } else {
    func.displayName = `PlasmicTeam.${nodeName}`;
  }
  return func;
}

function withPlasmicPageGuard<P extends object>(
  WrappedComponent: React.ComponentType<P>
) {
  const PageGuard: React.FC<P> = props => (
    <PlasmicPageGuard__
      minRole={"f8970d3a-c1ae-4ba8-80dd-90e548ee70d6"}
      appId={"tDWy3GXn2mzd9e2xUaPdmu"}
      authorizeEndpoint={"https://studio.plasmic.app/authorize"}
      canTriggerLogin={false}
    >
      <WrappedComponent {...props} />
    </PlasmicPageGuard__>
  );

  return PageGuard;
}

export const PlasmicTeam = Object.assign(
  // Top-level PlasmicTeam renders the root element
  withPlasmicPageGuard(makeNodeComponent("root")),
  {
    // Helper components rendering sub-elements
    navbar: makeNodeComponent("navbar"),
    img: makeNodeComponent("img"),
    modal2: makeNodeComponent("modal2"),
    form2: makeNodeComponent("form2"),

    // Metadata about props expected for PlasmicTeam
    internalVariantProps: PlasmicTeam__VariantProps,
    internalArgProps: PlasmicTeam__ArgProps,

    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicTeam;
/* prettier-ignore-end */
